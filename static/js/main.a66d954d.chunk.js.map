{"version":3,"sources":["app/Header/Header.tsx","lib/numberFormatting.ts","app/Display/Display.tsx","app/Button/Button.tsx","app/KeyPad/KeyPad.tsx","app/Calculator/Calculator.tsx","index.tsx"],"names":["StyledHeader","styled","div","Header","insertCommas","valueString","indexOfFirstValueInString","indexOf","stringIndex","length","slice","insertCommasIntoValueString","e","dot","StyledIndicatorList","StyledExpression","span","StyleScreen","StyledDisplay","Screen","value","hasMemory","expression","StyledButton","button","color","css","colorToCss","isLarge","Button","children","onClick","StyledPad","KeyPad","onDigitButtonClick","onPointButtonClick","onOperatorButtonClick","onChangeSignButtonClick","onEqualButtonClick","onAllClearButtonClick","onClearEntryButtonClick","onMemoryRecallButtonClick","onMemoryPlusButtonClick","onMemoryClearButtonClick","onMemoryMinusButtonClick","onSecondButtonClick","handleKeyDown","keyCode","shiftKey","console","log","useEffect","document","body","addEventListener","removeEventListener","StyledApp","Calculator","useState","memory","setMemory","result","setResult","waitingForOperand","setWaitingForOperand","pendingOperator","setPendingOperator","display","setDisplay","calculate","rightOperand","newResult","toString","Display","digit","newDisplay","operator","operand","Number","undefined","ReactDOM","render","StrictMode","className","getElementById"],"mappings":"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","file":"static/js/main.a66d954d.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from 'styled-components'\n\nconst StyledHeader = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\" ,Arial ,sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 36px;\n  color: #2C99A7;\n  text-align: center;\n`\n\nexport const Header: FunctionComponent = () => {\n\nreturn (\n    <StyledHeader>\n        7Button.com \n    </StyledHeader>\n  )\n}\n\nexport default Header","let insertCommas = function(valueString : string) {\n\n    let indexOfFirstValueInString = 0;\n\n    if (valueString.indexOf(\"-\") === 0)\n        indexOfFirstValueInString = 1;\n\n\n    for (let stringIndex = valueString.length - 3; stringIndex > indexOfFirstValueInString; stringIndex -= 3)\n        valueString = valueString.slice(0, stringIndex) + \",\" + valueString.slice(stringIndex, valueString.length);\n\n\n    return valueString;\n};\n\nexport function insertCommasIntoValueString(valueString : string) {\n\n    let e = valueString.indexOf(\"e\");\n    let dot = valueString.indexOf(\".\");\n\n    if (e === -1 && dot === -1)\n        valueString = insertCommas(valueString);\n\n    else {\n\n        if (e === -1)\n            valueString = insertCommas(valueString.slice(0, dot)) + valueString.slice(dot, valueString.length);\n\n        else if (dot === -1)\n            valueString = insertCommas(valueString.slice(0, e)) + valueString.slice(e, valueString.length);\n\n        else {\n\n            if (dot < e)\n                valueString = insertCommas(valueString.slice(0, dot)) + valueString.slice(dot, valueString.length);\n                \n            else\n                valueString = insertCommas(valueString.slice(0, e)) + valueString.slice(e, valueString.length);\n        }\n    }\n\n    return valueString;\n}","import React, { FunctionComponent } from 'react'\nimport styled from 'styled-components'\nimport { insertCommasIntoValueString } from '../../lib/numberFormatting'\n\ninterface DisplayProps {\n  hasMemory: boolean\n  expression: string\n  value: string\n}\n\nconst StyledIndicatorList = styled.div`\n  font-size: 0.75em;\n  line-height: 1;\n  opacity: 0.4;\n  text-align: right;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.25em;\n  min-height: 1em;\n`\n\nconst StyledExpression = styled.span`\n  margin-left: auto;\n`\n\nconst StyleScreen = styled.div`\n  font-size: 2.5em;\n  min-height: 1.4em;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;  \n  overflow: hidden;\n`\n\nconst StyledDisplay = styled.div`\n  background-color: #fff;\n  color: #2e2e2e;\n  padding: 1.5em 1em;\n`\n\nexport const Screen: FunctionComponent<DisplayProps> = ({ value, hasMemory, expression }) => {\n  return (\n    <StyledDisplay>\n      <StyledIndicatorList>\n        {hasMemory &&\n          <span>M</span>\n        }\n\n        <StyledExpression>\n          {expression}\n        </StyledExpression>\n      </StyledIndicatorList>\n\n      <StyleScreen>\n        {insertCommasIntoValueString(value)}\n      </StyleScreen>\n    </StyledDisplay>\n  )\n}\n\nexport default Screen","import React, { FunctionComponent } from 'react'\nimport styled, { css } from 'styled-components'\n\ninterface ButtonProps {\n  color?: 'red' | 'green' | 'dark-blue' | 'light-blue' | 'white'\n  isLarge?: boolean\n  onClick?: () => void\n}\n \nconst colorToCss = (color: ButtonProps['color']) => {\n  switch (color) {\n    case 'red':\n      return css`\n        background-color: #c04444;\n        border: 1px solid #212121;\n        color: #fff;\n      `\n    case 'green':\n      return css`\n        background-color: #018645;\n        border: 1px solid #212121;\n        color: #fff;\n      `\n    case 'dark-blue':\n      return css`\n        background-color: #7FAEB6;\n        border: 1px solid #212121;\n        color: #212121;\n      `\n    case 'light-blue':\n      return css`\n        background-color: #C4D2D4;\n        border: 1px solid #212121;\n        color: #212121;\n      `\n    case 'white':\n      return css`\n        background-color: #FFFFFF;\n        border: 1px solid  #2C99A7;\n        color: #fff;\n      `\n  }\n  return css`\n    background-color: #FFF3BE;\n    color: #212121;\n    border: 1px solid  #212121;\n  \n  `\n}\n\nexport const StyledButton = styled.button<ButtonProps>`\n  font-family: inherit;\n  font-size: inherit;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-radius: 10px;\n  padding-top: 1em;\n  padding-bottom: 1em;\n  transition: background-color 0.15s ease-in-out, opacity 0.15s ease-in-out;\n  ${({ color }) => colorToCss(color)}\n  ${({ isLarge }) =>\n    isLarge &&\n    css`\n      grid-column-end: 2fr;\n    `}\n  position: relative;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n  &:focus {\n    outline: 0;\n  }\n  :after {\n    content: '';\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    background-image: radial-gradient(circle, #aaf 10%, transparent 10.01%);\n    background-repeat: no-repeat;\n    background-position: 50%;\n    transform: scale(10, 10);\n    opacity: 0;\n    transition: transform 0.2s, opacity 1s;\n  }\n  :active:after {\n    transform: scale(0, 0);\n    opacity: 0.2;\n    transition: 0s;\n  }\n`\n\nexport const Button: FunctionComponent<ButtonProps> = ({ children, color, isLarge, onClick}) => {\n  \n\n\n  return (\n    <StyledButton color={color} isLarge={isLarge} onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default Button","import React, { FunctionComponent, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Button from '../Button/Button'\nimport TMV from '../TMV/TMV'\nimport { Digit, Operator } from '../../lib/types'\n\ninterface PadProps {\n  onDigitButtonClick: (digit: Digit) => void\n  onPointButtonClick: () => void\n  onOperatorButtonClick: (operator: Operator) => void\n  onChangeSignButtonClick: () => void\n  onEqualButtonClick: () => void\n  onAllClearButtonClick: () => void\n  onClearEntryButtonClick: () => void\n  onMemoryRecallButtonClick: () => void\n  onMemoryClearButtonClick: () => void\n  onMemoryPlusButtonClick: () => void\n  onMemoryMinusButtonClick: () => void\n  onSecondButtonClick: () => void\n}\n\nconst StyledPad = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr 1fr 1fr 1fr 1fr;\n  grid-auto-rows: 1fr;\n  gap: 2%\n`\n\nexport const KeyPad: FunctionComponent<PadProps> = ({\n  onDigitButtonClick,\n  onPointButtonClick,\n  onOperatorButtonClick,\n  onChangeSignButtonClick,\n  onEqualButtonClick,\n  onAllClearButtonClick,\n  onClearEntryButtonClick,\n  onMemoryRecallButtonClick,\n  onMemoryClearButtonClick,\n  onMemoryPlusButtonClick,\n  onMemoryMinusButtonClick,\n  onSecondButtonClick\n}) => {\n  const handleKeyDown = ({ keyCode, shiftKey }: KeyboardEvent) => {\n    console.log(keyCode)\n    if (keyCode >= 48 && keyCode <= 57 && !shiftKey) {\n      onDigitButtonClick((keyCode - 48) as Digit)\n    } else if ((keyCode >= 96 && keyCode <= 105)) {\n      onDigitButtonClick((keyCode - 96) as Digit)\n    } else if (keyCode === 107 || (keyCode === 187 && shiftKey)) {\n      onOperatorButtonClick('+')\n    } else if (keyCode === 109 || keyCode === 189) {\n      onOperatorButtonClick('-')\n    } else if (keyCode === 106 || (keyCode === 56 && shiftKey)) {\n      onOperatorButtonClick('×')\n    } else if (keyCode === 111 || keyCode === 191) {\n      onOperatorButtonClick('÷')\n    } else if (keyCode === 13 || (keyCode === 187 && !shiftKey)) {\n      onEqualButtonClick()\n    } else if (keyCode === 46) {\n      onClearEntryButtonClick()\n    } else if (keyCode === 27) {\n      onAllClearButtonClick()\n    } else if (keyCode === 78) {\n      onChangeSignButtonClick()\n    } else if (keyCode === 80) {\n      onMemoryPlusButtonClick()\n    } else if (keyCode === 81) {\n      onMemoryMinusButtonClick()\n    } else if (keyCode === 82) {\n      onMemoryRecallButtonClick()\n    }\n  }\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', handleKeyDown)\n    return () => document.body.removeEventListener('keydown', handleKeyDown)\n  })\n\n  return (\n    <StyledPad>\n      <Button color=\"light-blue\">\n        P =\n      </Button>\n      <Button color=\"light-blue\">\n        \n        </Button>\n      <Button color=\"white\">\n        \n      </Button>\n      <Button color=\"white\">\n\n      </Button>\n      <Button color=\"white\">\n   \n      </Button>\n      <Button  onClick={onAllClearButtonClick}>\n        CLR ALL\n      </Button>\n      <Button >\n        GEAR\n      </Button>\n      <Button color=\"light-blue\">\n        F =\n      </Button >\n      <Button color=\"light-blue\" isLarge={true} >\n        \n      </Button>\n      <Button color=\"red\" onClick={onSecondButtonClick}>\n        2nd\n      </Button>\n      <Button color=\"white\">\n\n      </Button>\n      <Button color=\"white\">\n   \n      </Button>\n      <Button color=\"white\">\n\n      </Button>\n      <Button color=\"dark-blue\" onClick={() => onOperatorButtonClick('÷')}>\n        ÷\n      </Button>\n      <Button color=\"light-blue\">\n        A =\n      </Button>\n      <Button color=\"light-blue\" isLarge={true} >\n        \n      </Button>\n      <Button color=\"white\">\n        \n      </Button>\n      <Button onClick={() => onDigitButtonClick(7)}>\n        7\n      </Button>\n      <Button onClick={() => onDigitButtonClick(8)}>\n        8\n      </Button>\n      <Button onClick={() => onDigitButtonClick(9)}>\n        9\n      </Button>\n      <Button color=\"dark-blue\" onClick={() => onOperatorButtonClick('×')}>\n        ×\n      </Button>\n      <Button  color=\"light-blue\">\n        g =\n      </Button>\n      <Button  color=\"light-blue\" isLarge={true}>\n        \n      </Button>\n      <Button color=\"white\">\n        \n      </Button>\n      <Button onClick={() => onDigitButtonClick(4)}>\n        4\n      </Button>\n      <Button onClick={() => onDigitButtonClick(5)}>\n        5\n      </Button>\n      <Button onClick={() => onDigitButtonClick(6)}>\n        6\n      </Button>\n      <Button color=\"dark-blue\" onClick={() => onOperatorButtonClick('-')}>\n        -\n      </Button>\n      <Button color=\"light-blue\">\n        n = \n      </Button>\n      <Button color=\"light-blue\" isLarge={true} >\n   \n      </Button>\n      <Button color=\"white\">\n   \n      </Button>\n      <Button onClick={() => onDigitButtonClick(1)}>\n        1\n      </Button>\n      <Button onClick={() => onDigitButtonClick(2)}>\n        2\n      </Button>\n      <Button onClick={() => onDigitButtonClick(3)}>\n        3\n      </Button>\n      <Button color=\"dark-blue\" onClick={() => onOperatorButtonClick('+')}>\n        +\n      </Button>\n      <Button color=\"light-blue\">\n        r = \n      </Button>\n      <Button color=\"light-blue\" isLarge={true} >\n   \n      </Button>\n      <Button color=\"green\">\n        Solve\n      </Button>\n      <Button onClick={() => onDigitButtonClick(0)}>\n        0\n      </Button>\n      <Button onClick={onPointButtonClick}>\n        .\n      </Button>\n      <Button color=\"light-blue\">\n        INF\n      </Button>\n      <Button color=\"dark-blue\" onClick={onEqualButtonClick}>\n        =\n      </Button>\n    </StyledPad>\n  )\n}\n\nexport default KeyPad","import React, { FunctionComponent, useState } from 'react'\nimport styled from 'styled-components'\nimport Header from '../Header/Header'\nimport Display from '../Display/Display'\nimport Pad from '../KeyPad/KeyPad'\nimport { Digit, Operator } from '../../lib/types'\n\n\nconst StyledApp = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\" ,Arial ,sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 18px;\n  width: 100vw;\n  max-width: 800px;\n`\n\nexport const Calculator: FunctionComponent = () => {\n  // Calculator's states\n  const [memory, setMemory] = useState<number>(0)\n  const [result, setResult] = useState<number>(0)\n  const [waitingForOperand, setWaitingForOperand] = useState<boolean>(true)\n  const [pendingOperator, setPendingOperator] = useState<Operator>()\n  const [display, setDisplay] = useState<string>('0')\n\n  const calculate = (rightOperand: number, pendingOperator: Operator): boolean => {\n    let newResult = result\n\n    switch (pendingOperator) {\n      case '+':\n        newResult += rightOperand\n        break\n      case '-':\n        newResult -= rightOperand\n        break\n      case '×':\n        newResult *= rightOperand\n        break\n      case '÷':\n        if (rightOperand === 0) {\n          return false\n        }\n\n        newResult /= rightOperand\n    }\n\n\n    setResult(newResult)\n    setDisplay(newResult.toString().toString().slice(0, 20))\n\n    return true\n  }\n\n  // Pad buttons handlers\n  const onDigitButtonClick = (digit: Digit) => {\n    let newDisplay = display\n \n\n    if ((display === '0' && digit === 0) || display.length > 20) {\n      return\n    }\n    \n    if (waitingForOperand) {\n      newDisplay = ''\n      setWaitingForOperand(false)\n    }\n\n    if (display !== '0') {\n      newDisplay = newDisplay + digit.toString()\n    } \n    else {\n      newDisplay = digit.toString()\n    }\n\n    \n    setDisplay(newDisplay)\n  }\n\n  const onPointButtonClick = () => {\n    let newDisplay = display\n\n    if (waitingForOperand) {\n      newDisplay = '0'\n    }\n\n    if (newDisplay.indexOf('.') === -1) {\n      newDisplay = newDisplay + '.'\n    }\n\n    setDisplay(newDisplay)\n    setWaitingForOperand(false)\n  }\n\n  const onOperatorButtonClick = (operator: Operator) => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n    } else {\n      setResult(operand)\n    }\n\n    setPendingOperator(operator)\n    setWaitingForOperand(true)\n  }\n\n  const onChangeSignButtonClick = () => {\n    const value = Number(display)\n\n    if (value > 0) {\n      setDisplay('-' + display)\n    } else if (value < 0) {\n      setDisplay(display.slice(1))\n    }\n  }\n\n  const onEqualButtonClick = () => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n\n      setPendingOperator(undefined)\n    } else {\n      setDisplay(operand.toString())\n    }\n\n    setResult(operand)\n    setWaitingForOperand(true)\n  }\n\n  const onAllClearButtonClick = () => {\n    setMemory(0)\n    setResult(0)\n    setPendingOperator(undefined)\n    setDisplay('0')\n    setWaitingForOperand(true)\n  }\n\n  const onClearEntryButtonClick = () => {\n    setDisplay('0')\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryRecallButtonClick = () => {\n    setDisplay(memory.toString())\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryClearButtonClick = () => {\n    setMemory(0)\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryPlusButtonClick = () => {\n    setMemory(memory + Number(display))\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryMinusButtonClick = () => {\n    setMemory(memory - Number(display))\n    setWaitingForOperand(true)\n  }\n\n  const onSecondButtonClick= () => {\n    console.log(\"onSecondButton Fired\");\n  }\n\n  return (\n    <StyledApp>\n      <Header/>\n      <Display value={display} hasMemory={memory !== 0} expression={typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? '' : display}` : ''} />\n      <Pad\n        onDigitButtonClick={onDigitButtonClick}\n        onPointButtonClick={onPointButtonClick}\n        onOperatorButtonClick={onOperatorButtonClick}\n        onChangeSignButtonClick={onChangeSignButtonClick}\n        onEqualButtonClick={onEqualButtonClick}\n        onAllClearButtonClick={onAllClearButtonClick}\n        onClearEntryButtonClick={onClearEntryButtonClick}\n        onMemoryRecallButtonClick={onMemoryRecallButtonClick}\n        onMemoryClearButtonClick={onMemoryClearButtonClick}\n        onMemoryPlusButtonClick={onMemoryPlusButtonClick}\n        onMemoryMinusButtonClick={onMemoryMinusButtonClick}\n        onSecondButtonClick={onSecondButtonClick}\n      />\n    </StyledApp>\n  )\n}\n\nexport default Calculator","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from \"../src/app/Calculator/Calculator\";\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"calc-container\">\n      <Calculator />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}